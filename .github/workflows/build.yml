name: Build Garmin Widget

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # --- Previous steps (kept intact) ---
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Robust jungle detection step (fixed) ---
      - name: Detect jungle file
        id: detect_jungle
        shell: bash
        run: |
          set -euo pipefail

          echo "Searching for .jungle files..."
          echo "Workspace: $(pwd)"
          echo "Listing top-level files:"
          ls -la

          echo "Recursive listing (trimmed):"
          # show recursive tree but limit depth for readability
          find . -maxdepth 3 -type d -print -o -type f -printf "  %p\n" | sed -n '1,200p' || true

          echo "Searching for .jungle files (null-separated)..."
          mapfile -d '' JUNGLE_ARRAY < <(find . -type f -name '*.jungle' -print0)

          JUNGLE_COUNT=${#JUNGLE_ARRAY[@]}
          echo "Found $JUNGLE_COUNT .jungle file(s)."

          if [ "$JUNGLE_COUNT" -eq 0 ]; then
            echo "No .jungle files found. Showing similar candidates:"
            find . -type f \( -name '*.jungle' -o -name '*.mcproj' -o -name '*project*' -o -name '*.xml' \) -print || true
            echo "If your jungle file is generated or ignored by .gitignore, ensure it is present in the repo during CI."
            exit 1
          elif [ "$JUNGLE_COUNT" -gt 1 ]; then
            echo "Multiple .jungle files found:"
            for f in "${JUNGLE_ARRAY[@]}"; do
              # trim leading ./ for readability
              printf " - %s\n" "${f#./}"
            done
            echo "Please specify which to use or remove duplicates."
            exit 1
          else
            # single jungle file â€” normalize path (remove leading ./)
            JUNGLE_PATH="${JUNGLE_ARRAY[0]}"
            JUNGLE_PATH="${JUNGLE_PATH#./}"
            echo "Using jungle file: $JUNGLE_PATH"
            echo "jungle_path=$JUNGLE_PATH" >> "$GITHUB_OUTPUT"
          fi

      # --- Garmin build step (uses detected jungle) ---
      - name: Build Garmin widget
        uses: blackshadev/garmin-connectiq-release-action@8.2.1-1
        with:
          entryPoint: ""
          developerKey: "./developer-key.der"
          projectJungle: "${{ steps.detect_jungle.outputs.jungle_path }}"
          outputPath: "build/BuzzClock.prg"
          args: >
            --release
            --output build/BuzzClock.prg
            --developer-key ./developer-key.der
            --project ${{ steps.detect_jungle.outputs.jungle_path }}

      # --- Upload artifact ---
      - name: Upload PRG artifact
        uses: actions/upload-artifact@v4
        with:
          name: BuzzClock.prg
          path: build/BuzzClock.prg
 
